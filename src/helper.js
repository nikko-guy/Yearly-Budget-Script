function debug() {
  run();
}

/**
 * @param {TransactionObject} transaction
 */
function checkIfDuplicate(transaction) {
  function equals(t1, t2) {
    if (t1.amount == t2.amount && t1.date.toString() == t2.date.toString() && t1.description == t2.description) return true;
  }
  var transactionList = transactions;
  for (var key in transactionList) {
    var t2 = transactionList[key];
    if (equals(transaction, t2)) return true;
  }
  return false;
}

/**
 * @param {TransactionType} type either income or expense
 * @param {Number} month the month in int form, starting at 0
 */
function incrementHeaderRows(type, month, amount = 1) {
  for (i = month; i < 12; i++) {
    headerRows[type.NAME][i] += amount;
  }
}

/**
 * Adds rows to bottom of spreadsheet
 * @param {SpreadsheetApp.Sheet} sheet
 * @param {Number} n number of rows to add
 * @param {Number} start Optional variable to specify startRow
 * @return {SpreadsheetApp.Range} range of added rows
 */
function addRows(sheet, n, start = null) {
  var lastRow = sheet.getMaxRows();
  var startRow = sheet.getLastRow()+1;
  if(start) startRow = start;
  var endRow = startRow + n-1;

  log(endRow);

  if (lastRow < endRow) sheet.insertRowsAfter(lastRow, endRow - lastRow);
  else if (lastRow > endRow) sheet.deleteRows(endRow + 1, lastRow - endRow);

  return sheet.getRange(startRow + ":" + endRow);
}

/**
 * @param {String} bankName Text to simplify
 */
function simplifyBankName(bankName) {
  var toCut = bankName.indexOf("  ");
  if (toCut != -1) {
    return bankName.substring(0, toCut);
  }
  else return bankName;
}

function importReset() {
  var sheet = spreadsheet.getSheetByName("Import Data");
  var range = sheet.getRange("A7:F");
  range.setBackground(null);
  range.setValue("");
}

/**
 * @param {SpreadsheetApp.Sheet} sheet sheet to check in
 * @param {String} a1range range to check for empty row, usually just 1 column e.g. "A2:A". Default is "D5:D"
 * @param {Number} rowStart the starting row mentioned in a1range e.g. if a1range is "A2:A" rowStart is 2. Default is 5
 * @return {Number}
 */
function getEmptyRow(sheet, a1range = "D5:D", rowStart = 5) {
  var range = sheet.getRange(a1range);
  var vals = range.getValues()
  var ct = 0;
  var max = range.getLastRow() - rowStart;
  while (vals[ct][0] != "" || range.getCell(ct + 1, 1).isPartOfMerge()) {
    if (ct == max) break;
    ct++;
  }
  return (ct + rowStart);
}


/**
 * Processes range and returns range as complete rows
 * @param {SpreadsheetApp.Sheet} Sheet sheet range is in
 * @param {SpreadsheetApp.Range} Range range to process
 * @return {SpreadsheetApp.Range}
 */
function getRangeAsRows(sheet, range) {
  var a1 = range.getA1Notation();
  var rowsA1 = a1.replace(/[^\d:]/g, '');
  if (rowsA1.indexOf(':') == -1) {
    var row = Number.parseInt(rowsA1);
    rowsA1 = row + ':' + row;
  }
  var r = sheet.getRange(rowsA1);
  log("Modified range to: " + r.getA1Notation());
  return r;
}

function getExecuteTime(func, n) {
  var times = [];
  var sum = 0;
  for (var i = 0; i < n; i++) {
    var start = new Date().getTime();
    func();
    var end = new Date().getTime();
    times.push(end - start);
    sum += (end - start);
  }
  log(times);
  return "Average time for function " + func.name + ": " + sum / times.length + " ms";
}

/**
 * @param {TransactionType} type either income or expense
 */
function generateUUID(type = null) {
  var t = type == null ? 'CN-' : type == TransactionType.INCOME ? 'I-' : 'E-';
  var timestamp = (new Date().getTime() / 1000 | 0).toString(16);
  return t + timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {
    return (Math.random() * 16 | 0).toString(16);
  }).toLowerCase();
}

/**
 * Tests string to see if it is a UUID generated by the script using RegEx
 * @param {String} input string to test
 */
function isUUID(input) {
  let regex = /[a-zA-Z]{1,2}-[a-zA-Z0-9]{24}/;
  return regex.test(input);
}

const cyrb53 = function (str, seed = 0) {
  let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
  for (let i = 0, ch; i < str.length; i++) {
    ch = str.charCodeAt(i);
    h1 = Math.imul(h1 ^ ch, 2654435761);
    h2 = Math.imul(h2 ^ ch, 1597334677);
  }
  h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);
  h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);
  var val = 4294967296 * (2097151 & h2) + (h1 >>> 0);
  var val2 = (h2 >>> 0).toString(16).padStart(8, 0) + (h1 >>> 0).toString(16).padStart(8, 0);
  return val2;
}

/**
 * @param {String} str string to check
 */
function isBlank(str) {
  return (!str || /^\s*$/.test(str));
}

/**
 * @param {String} str string to check
 */
function isEmpty(str) {
  return (!str || str.length === 0);
}

/**
 * @param {SpreadsheetApp.Range} range sheet range to redirect to
 */
function redirect(range) {
  range.activate();
}

/**
 * @param {SpreadsheetApp.Range} range sheet range to get url of
 * @return {String}
 */
function getLinkToRange(range) {
  return "#gid=" + range.getSheet().getSheetId() + "&range=" + range.getA1Notation();
}

/**
 * Returns string as RichTextValue
 * @param {String} string string to return as RichText
 * @return {SpreadsheetApp.RichTextValue}
 */
function normalRichText(string) {
  return SpreadsheetApp.newRichTextValue().setText(string).setTextStyle(normalText).build();
}

/**
 * @param {String} sheetName either "Income" or "Expense"
 * @deprecated sets up the formulas in the summary sheets, shouldn't be needed but kept it just in case, won't actually cause any issues
 */
function thing(sheetName) {

  var sheet = spreadsheet.getSheetByName(sheetName + " Summary")
  var category
  var year = spreadsheet.getSheetByName("Summary").getRange("M4").getValue();

  for (var row = 3; row < 135; row++) {
    var cell = sheet.getRange(row, 1)
    var val = cell.getValue()
    if (val != "") {
      category = cell.getA1Notation()
      continue
    }
    cell = sheet.getRange(row, 3)
    val = cell.getValue()
    if (val == "") continue;


    for (var column = 3; column < 16; column++) {
      cell = sheet.getRange(row, column)
      var formattedMonth1
      var formattedMonth2
      if (column == 3) continue
      if (column == 15) {
        formattedMonth1 = "12/1"
        formattedMonth2 = "=12/31"
      }
      else {
        formattedMonth1 = column - 3 + "/1"
        formattedMonth2 = column - 2 + "/1"
      }

      var value = "=if(isblank($C" + row + "), \"\", sumifs('" + sheetName + " Sheet'!$D:$D,'" + sheetName + " Sheet'!$C:$C,\">=" + formattedMonth1 + "\",'" + sheetName + " Sheet'!$C:$C,\"<" + formattedMonth2 + "\",'" + sheetName + " Sheet'!$G:$G,$C" + row + ",'" + sheetName + " Sheet'!$F:$F,$" + category + "))"
      cell.setValue(value)

    }
  }
}